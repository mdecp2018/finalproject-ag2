<h1>Introduction</h1>
<p>2018 Fall 期末分組網站</p>
<p><a href="https://s40723143.github.io/123.html">打志成</a></p>
<p><span>Leader</span><span>：</span></p>
<p>詹益任 40723143  期中分數:69 <a href="https://mdecp2018.github.io/site-s40723143/content/index.html">個人</a></p>
<p><span>Member：</span></p>
<p>王志丞 40723105  期中分數:70 <a href="https://mdecp2018.github.io/site-s40723105/content/index.html">個人</a></p>
<p>王晨祐 40723107 期中分數:60 <a href="https://mdecp2018.github.io/site-s40723107/content/index.html">個人</a></p>
<p>王昱翔 40723106 期中分數:75 <a href="https://mdecp2018.github.io/site-s40723106/content/index.html">個人</a></p>
<p>黃柏翰 40723139  期中分數:65 <a href="https://mdecp2018.github.io/site-s40723139/content/index.html">個人</a></p>
<p>徐敬倫 40723124 期中分數: 60 <a href="https://mdecp2018.github.io/site-s40723124/content/index.html">個人</a></p>
<p>本倉儲位於:  <a href="https://github.com/mdecourse/2018fall">https://github.com/mdecourse/2018fall</a> </p>
<h1>Course</h1>
<p>&lt;h1&gt;Python 語法&lt;/h1&gt;<br/>&lt;p&gt;Python 3 官方教材:&amp;nbsp;&lt;a href="https://docs.python.org/3/index.html"&gt;https://docs.python.org/3/index.html&lt;/a&gt;&amp;nbsp;&lt;/p&gt;<br/>&lt;p&gt;Python tutorial:&amp;nbsp;&lt;a href="https://docs.python.org/3/tutorial/index.html"&gt;https://docs.python.org/3/tutorial/index.html&lt;/a&gt;&amp;nbsp;(英文)&lt;/p&gt;<br/>&lt;p&gt;Python 教學:&amp;nbsp;&lt;a href="https://python-doc-tw.github.io/tutorial/index.html"&gt;https://python-doc-tw.github.io/tutorial/index.html&lt;/a&gt;&amp;nbsp;&lt;/p&gt;<br/>&lt;p&gt;網頁上的 Python - Brython:&amp;nbsp;&lt;a href="https://www.brython.info/static_doc/en/intro.html"&gt;https://www.brython.info/static_doc/en/intro.html&lt;/a&gt;&amp;nbsp; (解譯式)&lt;/p&gt;<br/>&lt;p&gt;網頁上的 Python GUI- Flexx:&amp;nbsp;&lt;a href="https://flexx.readthedocs.io/en/stable/"&gt;https://flexx.readthedocs.io/en/stable/&lt;/a&gt;&amp;nbsp;(轉譯式)&lt;/p&gt;<br/>&lt;p&gt;<br/>&lt;script src="/static/brython.js"&gt;&lt;/script&gt;<br/>&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;<br/>&lt;!-- for ggame --&gt;<br/>&lt;script src="/static/jquery-3.3.1.min.js"&gt;&lt;/script&gt;<br/>&lt;script src="/static/jquery-ui.1.12.1.min.js"&gt;&lt;/script&gt;<br/>&lt;script src="/static/pixi-3.0.5.min.js"&gt;&lt;/script&gt;<br/>&lt;script src="/static/buzz-1.2.1.js"&gt;&lt;/script&gt;<br/>&lt;script src="/static/bs.js"&gt;&lt;/script&gt;<br/>&lt;!-- Cango 程式庫 --&gt;<br/>&lt;script src="/static/Cango-13v08-min.js"&gt;&lt;/script&gt;<br/>&lt;script src="/static/CangoAxes-4v01-min.js"&gt;&lt;/script&gt;<br/>&lt;script src="/static/gearUtils-05.js"&gt;&lt;/script&gt;<br/>&lt;!-- for Konva 程式庫 --&gt;<br/>&lt;script src="/static/konva.min.js"&gt;&lt;/script&gt;<br/>&lt;script&gt;<br/>window.onload=function(){<br/>brython({debug:1, pythonpath:['/static/']});<br/>}<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/javascript" src="/static/ace/FileSaver.min.js"&gt;&lt;/script&gt;<br/>&lt;script type="text/javascript" src="/static/ace/filereader.js"&gt;&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/javascript" src="/static/ace/ace.js"&gt;&lt;/script&gt;<br/>&lt;script type="text/javascript" src="/static/ace/ext-language_tools.js"&gt;&lt;/script&gt;<br/>&lt;script type="text/javascript" src="/static/ace/mode-python3.js"&gt;&lt;/script&gt;<br/>&lt;script type="text/javascript" src="/static/ace/snippets/python.js"&gt;&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/javascript"&gt;<br/>function doSave(storage_id, filename){<br/>var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});<br/>filename = document.getElementById(filename).value<br/>saveAs(blob, filename+".py");<br/>}<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;h4&gt;開始練習 print() 用法, 並著手建立函式&lt;/h4&gt;<br/>&lt;p&gt;&lt;!-- 印出版次與關鍵字程式 --&gt;&lt;/p&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>from browser import html<br/>import ace</p>
<p># 清除畫布<br/>def clear_bd(ev):<br/>bd = doc["brython_div"]<br/>bd.clear()</p>
<p># Brython 3.3.4 內建的 container 名稱為 'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id<br/>Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )</p>
<p>Ace.editor.setValue("""# 導入 sys 模組<br/>import sys<br/># 導入 keyword 模組<br/>import keyword</p>
<p>def helloWorld():<br/>print("Hello World!")</p>
<p>helloWorld()</p>
<p># 利用 sys 模組中的 version_info 印出 Python 版次<br/>print("Python version: ", sys.version_info)<br/># 利用 keyword 模組中的 kwlist 印出關鍵字<br/>print("Python keywords: ", keyword.kwlist)<br/>""")<br/>Ace.editor.scrollToRow(0)<br/>Ace.editor.gotoLine(0)</p>
<p># 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定<br/>doc['kw_run'].bind('click', Ace.run)<br/>doc['kw_show_console'].bind('click', Ace.show_console)<br/>doc['kw_clear_console'].bind('click', Ace.clear_console)<br/>doc['clear_bd'].bind('click', clear_bd)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;<br/>&lt;div id="kw_editor" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;<br/>&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;<br/>&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"&gt;&lt;/form&gt;<br/>&lt;p&gt;&lt;button id="kw_run"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;<br/>&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console"&gt;&lt;/textarea&gt;&lt;/div&gt;<br/>&lt;div id="brython_div"&gt;&lt;/div&gt;<br/>&lt;div class="col-md-0" height="1" id="graphics-column" width="1"&gt;&lt;/div&gt;<br/>&lt;p&gt;&lt;!-- ****************************** keyword start --&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/># 導入位於 static 目錄下的 beditor.py <br/>import beditor<br/># 利用 beditor.py 中的 editor 類別建立案例, 對應到 kw1<br/>kw1 = beditor.editor("""# 導入 sys 模組<br/>import sys<br/># 導入 keyword 模組<br/>import keyword</p>
<p># 利用 sys 模組中的 version_info 印出 Python 版次<br/>print("Python version: ", sys.version_info)<br/># 利用 keyword 模組中的 kwlist 印出關鍵字<br/>print("Python keywords: ", keyword.kwlist)<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "keyword" 的按鈕點按時, 執行 kw1 物件中的 prog 方法<br/>doc["keyword"].bind('click', kw1.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;p&gt;&lt;!-- ****************************** keyword end --&gt;&lt;/p&gt;<br/>&lt;p&gt;&lt;!-- ***************************** slide ex1 start --&gt;&lt;/p&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Ex1 = beditor.editor("""# 導入 Ex1 原始碼<br/>a = 0<br/>def my_print(n, input_str):<br/>print("以下將重覆列印 '", input_str + "' " + str(n) + "次")<br/>for i in range(n):<br/>print(i, input_str)</p>
<p>my_print(5, "Hello World!")<br/>the_str = "開始學習 Python"<br/>num = input("請輸入要列印的次數!")<br/>my_print(int(num), the_str)<br/>a = a + 1<br/>print("(" + str(a) + ")", "_" * 25)</p>
<p>def myfun():<br/>yield 1<br/>yield 2<br/>yield 3</p>
<p>for i in myfun():<br/>print(i)</p>
<p>x = iter(myfun())<br/>y = list(myfun())</p>
<p>a = a + 1<br/>print("(" + str(a) + ")", "_" * 25)<br/>print(x.__next__())<br/>print(x.__next__())<br/>print(x.__next__())<br/>print(y)<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "ex1" 的按鈕點按時, 執行 Ex1 物件中的 prog 方法<br/>doc["ex1"].bind('click', Ex1.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;p&gt;&lt;!-- ***************************** slide ex1 end --&gt;&lt;/p&gt;<br/>&lt;p&gt;&lt;!-- ***************************** slide ex2 start --&gt;&lt;/p&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Ex2 = beditor.editor("""# Python 的內建資料型別<br/>import math<br/>def f():<br/>print("This is a user-defined function")<br/>return 42</p>
<p>print("Some basic types in Python:")<br/>print(type(2)) # int<br/>print(type(2.2)) # float<br/>print(type("2.2")) # str (string)<br/>print(type(2 &lt; 2.2)) # bool (boolean)<br/>print(type(math)) # module<br/>print(type(math.tan)) # builtin_function_or_method ("function" in Brython)<br/>print(type(f)) # function (user-defined function)<br/>print(type(type(42))) # type</p>
<p>print("#####################################################")</p>
<p>print("And some other types we will see later in the course...")<br/>print(type(Exception())) # Exception<br/>print(type(range(5))) # range<br/>print(type([1,2,3])) # list<br/>print(type((1,2,3))) # tuple<br/>print(type({1,2})) # set<br/>print(type({1:42})) # dict (dictionary or map)<br/>print(type(2+3j)) # complex (complex number) (we may not see this type)<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "ex2" 的按鈕點按時, 執行 Ex2 物件中的 prog 方法<br/>doc["ex2"].bind('click', Ex2.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;p&gt;&lt;!-- ***************************** slide ex2 end --&gt;&lt;/p&gt;<br/>&lt;p&gt;&lt;!-- ***************************** slide ex3 start --&gt;&lt;/p&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Ex3 = beditor.editor("""# Python 的內建常數與函式<br/># 內建常數<br/>print("Some builtin constants:")<br/>print(True)<br/>print(False)<br/>print(None)</p>
<p>print("And some more constants in the math module:")<br/>import math<br/>print(math.pi)<br/>print(math.e)<br/># 內建函式<br/>print("Type conversion functions:")<br/>print(bool(0)) # convert to boolean (True or False)<br/>print(float(42)) # convert to a floating point number<br/>print(int(2.8)) # convert to an integer (int)</p>
<p>print("And some basic math functions:")<br/>print(abs(-5)) # absolute value<br/>print(max(2,3)) # return the max value<br/>print(min(2,3)) # return the min value<br/>print(pow(2,3)) # raise to the given power (pow(x,y) == x**y)<br/>print(round(2.354, 1)) # round with the given number of digits<br/># other examples<br/>print(3 * 2)<br/>print(3 * "abc")<br/>print(3 + 2)<br/>print("abc" + "def")<br/>print(3 + "def")<br/># Type Affect Semantics<br/>print(3 * 2)<br/>print(3 * "abc")<br/>print(3 + 2)<br/>print("abc" + "def")<br/>print(3 + "def")<br/># Integer Division<br/>print("The / operator does 'normal' float division:")<br/>print(" 5/3 =", ( 5/3))<br/>print()<br/>print("The // operator does integer division:")<br/>print(" 5//3 =", ( 5//3))<br/>print(" 2//3 =", ( 2//3))<br/>print("-1//3 =", (-1//3))<br/>print("-4//3 =", (-4//3))<br/># Modulus or Remainder Operator (%)<br/>print(" 6%3 =", ( 6%3))<br/>print(" 5%3 =", ( 5%3))<br/>print(" 2%3 =", ( 2%3))<br/>print(" 0%3 =", ( 0%3))<br/>print("-4%3 =", (-4%3))<br/>print(" 3%0 =", ( 3%0))<br/># Verify that (a%b) is equivalent to (a-(a//b)*b)<br/>def mod(a, b):<br/>return a - (a//b)*b<br/>print(41%14, mod(41,14))<br/>print(14%41, mod(14,41))<br/>print(-32%9, mod(-32,9))<br/>print(32%-9, mod(32,-9))<br/># Operator Order (Precedence and Associativity)<br/>print("Precedence:")<br/>print(2+3*4) # prints 14, not 20<br/>print(5+4%3) # prints 6, not 0 (% has same precedence as *, /, and //)<br/>print(2**3*4) # prints 32, not 4096 (** has higher precedence than *, /, //, and %)</p>
<p>print()</p>
<p>print("Associativity:")<br/>print(5-4-3) # prints -2, not 4 (- associates left-to-right)<br/>print(4**3**2) # prints 262144, not 4096 (** associates right-to-left)<br/># Approximate Values of Floating-Point Numbers<br/>print(0.1 + 0.1 == 0.2) # True, but...<br/>print(0.1 + 0.1 + 0.1 == 0.3) # False!<br/>print(0.1 + 0.1 + 0.1) # prints 0.30000000000000004 (uh oh)<br/>print((0.1 + 0.1 + 0.1) - 0.3) # prints 5.55111512313e-17 (tiny, but non-zero!)<br/># Equality Testing with math.isclose<br/>print("The problem....")<br/>d1 = 0.1 + 0.1 + 0.1<br/>d2 = 0.3<br/>print(d1 == d2) # False (never use == with floats!)</p>
<p>print()<br/>print("The solution...")<br/>import math<br/>print(math.isclose(d1, d2)) # True!<br/># math.isclose checks if the two numbers are ALMOST equal, within a small error<br/># Short-Circuit Evaluation<br/>def yes():<br/>return True</p>
<p>def no():<br/>return False</p>
<p>def crash():<br/>return 1/0 # crashes!</p>
<p>print(no() and crash()) # Works!<br/>print(crash() and no()) # Crashes!<br/>print (yes() and crash()) # Never runs (due to crash), but would also crash (without short-circuiting)<br/># Or operator<br/>def yes():<br/>return True</p>
<p>def no():<br/>return False</p>
<p>def crash():<br/>return 1/0 # crashes!</p>
<p>print(yes() or crash()) # Works!<br/>print(crash() or yes()) # Crashes!<br/>print(no() or crash()) # Never runs (due to crash), but would also crash (without short-circuiting)<br/># more examples<br/>def isPositive(n):<br/>result = (n &gt; 0)<br/>print("isPositive(",n,") =", result)<br/>return result</p>
<p>def isEven(n):<br/>result = (n % 2 == 0)<br/>print("isEven(",n,") =", result)<br/>return result</p>
<p>print("Test 1: isEven(-4) and isPositive(-4))")<br/>print(isEven(-4) and isPositive(-4)) # Calls both functions<br/>print("----------")<br/>print("Test 2: isEven(-3) and isPositive(-3)")<br/>print(isEven(-3) and isPositive(-3)) # Calls only one function!<br/># type vs isinstance<br/># Both type and isinstance can be used to type-check<br/># In general, (isinstance(x, T)) will be more robust than (type(x) == T)</p>
<p>print(type("abc") == str)<br/>print(isinstance("abc", str))</p>
<p># We'll see better reasons for this when we cover OOP + inheritance later<br/># in the course. For now, here is one reason: say you wanted to check<br/># if a value is any kind of number (int, float, complex, etc). <br/># You could do:</p>
<p>def isNumber(x):<br/>return ((type(x) == int) or<br/>(type(x) == float)) # are we sure this is ALL kinds of numbers?</p>
<p>print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))</p>
<p># But this is cleaner, and works for all kinds of numbers, including<br/># complex numbers for example:</p>
<p>import numbers<br/>def isNumber(x):<br/>return isinstance(x, numbers.Number) # works for any kind of number</p>
<p>print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "ex3" 的按鈕點按時, 執行 Ex3 物件中的 prog 方法<br/>doc["ex3"].bind('click', Ex3.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;p&gt;&lt;!-- ***************************** slide ex3 end --&gt;&lt;/p&gt;<br/>&lt;p&gt;&lt;!-- ***************************** slide ex4 start --&gt;&lt;/p&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Ex4 = beditor.editor("""# Python 函式<br/># Vocabulary<br/>x = 5<br/>def f(y, z):<br/>result = x + y + z<br/>return result<br/>print(f(1, 2)) # 8<br/>print(f(3, 4)) # 12</p>
<p># Vocabulary:<br/># variables: global vs. local<br/># statements vs. expressions<br/># function definitions vs. function calls<br/># parameters vs. arguments</p>
<p># Return Statements<br/># Basic example</p>
<p>def isPositive(x):<br/>return (x &gt; 0)</p>
<p>print(isPositive(5)) # True<br/>print(isPositive(-5)) # False<br/>print(isPositive(0)) # False</p>
<p># Return ends the function immediately<br/>def isPositive(x):<br/>print("Hello!") # runs<br/>return (x &gt; 0)<br/>print("Goodbye!") # does not run ("dead code")</p>
<p>print(isPositive(5)) # prints Hello, then True</p>
<p># No return statement --&gt; return None<br/>def f(x):<br/>x + 42</p>
<p>print(f(5)) # None</p>
<p>def f2(x):<br/>result = x + 42</p>
<p>print(f2(5)) # None</p>
<p># Print versus Return<br/># This is a common early mistake (confusing print and return):<br/>def cubed(x):<br/>print(x**3) # Here is the error!</p>
<p>cubed(2) # seems to work!<br/>print(cubed(3)) # sort of works (but prints None, which is weird)<br/>print(2*cubed(4)) # Error!</p>
<p># Once again (correctly)<br/>def cubed2(x):<br/>return (x**3) # That's better!</p>
<p>cubed2(2) # seems to be ignored (why?)<br/>print(cubed2(3)) # works!<br/>print(2*cubed2(4)) # works!</p>
<p># Different Parameter and Return Types<br/>def hypotenuse(a, b):<br/>return ((a**2) + (b**2))**0.5</p>
<p>print(hypotenuse(3, 4)) # 5.0 (not 5)<br/>print("---------------------")</p>
<p>def xor(b1, b2):<br/>return ((b1 and (not b2)) or (b2 and (not b1))) # same as (b1 != b2)</p>
<p>print(xor(True, True)) # False<br/>print(xor(True, False)) # True<br/>print(xor(False, True)) # True<br/>print(xor(False, False)) # False<br/>print("---------------------")</p>
<p>def isPositive(n):<br/>return (n &gt; 0)</p>
<p>print(isPositive(10)) # True<br/>print(isPositive(-1.234)) # False</p>
<p># Function Composition<br/>def f(w):<br/>return 10*w</p>
<p>def g(x, y):<br/>return f(3*x) + y</p>
<p>def h(z):<br/>return f(g(z, f(z+1)))</p>
<p>print(h(1)) # hint: try the "visualize" feature</p>
<p># Helper Functions <br/>def onesDigit(n):<br/>return n%10</p>
<p>def largerOnesDigit(x, y):<br/>return max(onesDigit(x), onesDigit(y))</p>
<p>print(largerOnesDigit(134, 672)) # 4<br/>print(largerOnesDigit(132, 674)) # Still 4</p>
<p># Test Functions<br/># A broken test function<br/>def onesDigit(n):<br/>return n%10</p>
<p>def testOnesDigit():<br/>print("Testing onesDigit()...", end="")<br/>assert(onesDigit(5) == 5)<br/>assert(onesDigit(123) == 3)<br/>assert(onesDigit(100) == 0)<br/>assert(onesDigit(999) == 9)<br/>print("Passed!")</p>
<p>testOnesDigit() # Passed! Why is this bad?</p>
<p># A better version<br/>def onesDigit2(n):<br/>return n%10</p>
<p>def testOnesDigit2():<br/>print("Testing onesDigit()...", end="")<br/>assert(onesDigit2(5) == 5)<br/>assert(onesDigit2(123) == 3)<br/>assert(onesDigit2(100) == 0)<br/>assert(onesDigit2(999) == 9)<br/>assert(onesDigit2(-123) == 3) # Added this test<br/>print("Passed!")</p>
<p>testOnesDigit2() # Crashed! So the test function worked!</p>
<p># Local Variable Scope<br/>def f(x):<br/>print("In f, x =", x)<br/>x += 5<br/>return x</p>
<p>def g(x):<br/>return f(x*2) + f(x*3)</p>
<p>print(g(2))</p>
<p># Another example<br/>def f(x):<br/>print("In f, x =", x)<br/>x += 7<br/>return round(x / 3)</p>
<p>def g(x):<br/>x *= 10<br/>return 2 * f(x)</p>
<p>def h(x):<br/>x += 3<br/>return f(x+4) + g(x)</p>
<p>print(h(f(1)))</p>
<p># Global Variable Scope<br/># In general, you should avoid using global variables.<br/># You will even lose style points if you use them!<br/># Still, you need to understand how they work, since others<br/># will use them, and there may also be some very few occasions<br/># where you should use them, too!</p>
<p>g = 100</p>
<p>def f(x):<br/>return x + g</p>
<p>print(f(5)) # 105<br/>print(f(6)) # 106<br/>print(g) # 100</p>
<p># Another exampl<br/>g = 100</p>
<p>def f(x):<br/># If we modify a global variable, we must declare it as global.<br/># Otherwise, Python will assume it is a local variable.<br/>global g<br/>g += 1<br/>return x + g</p>
<p>print(f(5)) # 106<br/>print(f(6)) # 108<br/>print(g) # 102</p>
<p># Default arguments<br/># Sometimes, a function has a parameter that has a natural default<br/># We can specify that default value in the function definition,<br/># then choose whether or not to include it in the function call.</p>
<p>def f(x, y=10):<br/>return x + y</p>
<p>print(f(5)) # 15<br/>print(f(5,1)) # 6<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "ex4" 的按鈕點按時, 執行 Ex4 物件中的 prog 方法<br/>doc["ex4"].bind('click', Ex4.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;p&gt;&lt;!-- ***************************** slide ex4 end --&gt;&lt;/p&gt;<br/>&lt;!-- line drawing start --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Draw = beditor.editor("""# Line drawing<br/># 導入 doc<br/>from browser import document as doc<br/>from browser import html<br/>import math<br/>canvas = html.CANVAS(width = 300, height = 200)<br/>canvas.id = "line_drawing"<br/>brython_div = doc["brython_div"]<br/>brython_div &lt;= canvas</p>
<p># 準備繪圖畫布<br/>canvas = doc["line_drawing"]<br/>ctx = canvas.getContext("2d")<br/># 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點<br/># ctx.setTransform(1, 0, 0, -1, 0, canvas.height)<br/># 以下採用 canvas 原始座標繪圖<br/># 設定填圖顏色<br/>ctx.fillStyle = "rgb(200,0,0)"<br/># 設定畫筆顏色<br/>ctx.strokeStyle = "rgb(0,0,200)"<br/># 乘上 deg 可轉為徑度單位<br/>deg = math.pi / 180</p>
<p># 建立多邊形定點位置畫線函式<br/>def star(radius, xc, yc, n):<br/>#radius = 100<br/>#xc = 200<br/>#yc = 200<br/>xi = xc + radius*math.cos((360/n)*deg+90*deg)<br/>yi = yc - radius*math.sin((360/n)*deg+90*deg)<br/>ctx.beginPath()<br/>ctx.moveTo(xi,yi)<br/>for i in range(2, n+1):<br/>x = xc + radius*math.cos((360/n)*deg*i+90*deg)<br/>y = yc - radius*math.sin((360/n)*deg*i+90*deg)<br/>ctx.lineTo(x,y)<br/># 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色<br/># 畫五邊形框線<br/>star(50, 50, 50, 5)<br/>ctx.closePath()<br/>ctx.stroke()<br/><br/># 填三角形色塊<br/>star(50, 150, 50, 3)<br/>ctx.closePath()<br/>ctx.fill()<br/><br/># 改變畫線顏色後, 畫七邊形框線<br/>ctx.strokeStyle = "rgb(0,200,20)"<br/>star(50, 250, 50, 7)<br/>ctx.closePath()<br/>ctx.stroke()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "draw" 的按鈕點按時, 執行 Draw 物件中的 prog 方法<br/>doc["draw"].bind('click', Draw.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- line drawing ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- flag ex start --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Flag = beditor.editor("""# 畫中華民國國旗<br/># 導入 doc<br/>from browser import document as doc<br/>from browser import html<br/>import math<br/>canvas = html.CANVAS(width = 300, height = 200)<br/>canvas.style = {"width": "100%"}<br/>canvas.id = "taiwan_flag"<br/>brython_div = doc["brython_div"]<br/>brython_div &lt;= canvas</p>
<p># 準備繪圖畫布<br/>canvas = doc["taiwan_flag"]<br/>ctx = canvas.getContext("2d")<br/># 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點<br/># ctx.setTransform(1, 0, 0, -1, 0, canvas.height)<br/># 以下採用 canvas 原始座標繪圖<br/>flag_w = canvas.width<br/>flag_h = canvas.height<br/>circle_x = flag_w/4<br/>circle_y = flag_h/4<br/># 先畫滿地紅<br/>ctx.fillStyle='rgb(255, 0, 0)'<br/>ctx.fillRect(0,0,flag_w,flag_h)<br/># 再畫青天<br/>ctx.fillStyle='rgb(0, 0, 150)'<br/>ctx.fillRect(0,0,flag_w/2,flag_h/2)<br/># 畫十二道光芒白日<br/>ctx.beginPath()<br/>star_radius = flag_w/8<br/>angle = 0<br/>for i in range(24):<br/>angle += 5*math.pi*2/12<br/>toX = circle_x + math.cos(angle)*star_radius<br/>toY = circle_y + math.sin(angle)*star_radius<br/># 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo<br/>if (i):<br/>ctx.lineTo(toX, toY)<br/>else:<br/>ctx.moveTo(toX, toY)<br/>ctx.closePath()<br/># 將填色設為白色<br/>ctx.fillStyle = '#fff'<br/>ctx.fill()<br/># 白日:藍圈<br/>ctx.beginPath()<br/>ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)<br/>ctx.closePath()<br/># 填色設為藍色<br/>ctx.fillStyle = 'rgb(0, 0, 149)'<br/>ctx.fill()<br/># 白日:白心<br/>ctx.beginPath()<br/>ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)<br/>ctx.closePath()<br/># 填色設為白色<br/>ctx.fillStyle = '#fff'<br/>ctx.fill()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "flag" 的按鈕點按時, 執行 Flag 物件中的 prog 方法<br/>doc["flag"].bind('click', Flag.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- flag ex ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- bunny start --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Bunny = beditor.editor("""# Ggame<br/>from ggame import App, ImageAsset, Sprite, MouseEvent<br/>from random import random, randint<br/>from browser import document as doc<br/>from browser import html<br/>import math</p>
<p># 引入既有的id="graphics-column" 標註<br/>graphics_column = doc["graphics-column"]<br/># 建立內定名稱為 "ggame-canvas" 的 canvas 標註<br/>canvas = html.CANVAS(width = 600, height = 400)<br/>canvas.id = "ggame-canvas"<br/># 將 canvas 插入 gc 標註中<br/>graphics_column &lt;= canvas</p>
<p><br/>class Bunny(Sprite):<br/><br/>asset = ImageAsset("/images/bunny.png")<br/><br/>def __init__(self, position):<br/>super().__init__(Bunny.asset, position)<br/># register mouse events<br/>App.listenMouseEvent(MouseEvent.mousedown, self.mousedown)<br/>App.listenMouseEvent(MouseEvent.mouseup, self.mouseup)<br/>App.listenMouseEvent(MouseEvent.mousemove, self.mousemove)<br/>self.dragging = True<br/>self.deltax = 0<br/>self.deltay = 0</p>
<p><br/>def step(self):<br/># Every now and then a bunny hops...<br/>if random() &lt; 0.01:<br/>self.x += randint(-20,20)<br/>self.y += randint(-20,20)<br/><br/><br/>def mousedown(self, event):<br/># capture any mouse down within 50 pixels<br/>self.deltax = event.x - (self.x + self.width//2) <br/>self.deltay = event.y - (self.y + self.height//2)<br/>if abs(self.deltax) &lt; 50 and abs(self.deltay) &lt; 50:<br/>self.dragging = True<br/># only drag one bunny at a time - consume the event<br/>event.consumed = True<br/><br/>def mousemove(self, event):<br/>if self.dragging:<br/>self.x = event.x - self.deltax - self.width//2<br/>self.y = event.y - self.deltay - self.height//2<br/>event.consumed = True<br/><br/>def mouseup(self, event):<br/>if self.dragging:<br/>self.dragging = False<br/>event.consumed = True<br/><br/><br/>class DemoApp(App):<br/><br/>def __init__(self):<br/>super().__init__()<br/>for i in range(5):<br/>Bunny((randint(50, 600), randint(50, 400)))<br/><br/>def step(self):<br/># Override step to perform action on each frame update<br/>for bunny in self.spritelist:<br/>bunny.step()</p>
<p><br/># Create the app<br/>app = DemoApp() <br/># Run the app<br/>app.run()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "bunny" 的按鈕點按時, 執行 Bunny 物件中的 prog 方法<br/>doc["bunny"].bind('click', Bunny.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- bunny ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- clear canvas start --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Clear = beditor.editor("""# 清除畫布<br/>from browser import document, html<br/>brython_div = document["brython_div"] <br/>brython_div.clear()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "clear" 的按鈕點按時, 執行 Clear 物件中的 prog 方法<br/>doc["clear"].bind('click', Clear.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- clear canvas ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- cango spur gears start --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Spur = beditor.editor("""# Cango Spur Gears<br/>from browser import document as doc<br/>from browser import html<br/>import math<br/>canvas = html.CANVAS(width = 600, height = 400)<br/>canvas.id = "cango_gear"<br/>brython_div = doc["brython_div"]<br/>brython_div &lt;= canvas<br/>from browser import document as doc<br/>from browser import window<br/>import math</p>
<p>canvas = doc["cango_gear"]<br/># 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx<br/>#ctx = canvas.getContext("2d")<br/>cango = window.Cango.new<br/># 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換<br/>shapedefs = window.shapeDefs<br/>shape = window.Shape.new<br/>path = window.Path.new<br/>creategeartooth = window.createGearTooth.new</p>
<p>tweener = window.Tweener.new<br/># 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上<br/>cgo = cango("cango_gear")</p>
<p>######################################<br/># 畫正齒輪輪廓<br/>#####################################<br/>def cangoGear(n, m, pa):<br/># n 為齒數<br/>#n = 17<br/># pa 為壓力角<br/>#pa = 25<br/># m 為模數, 根據畫布的寬度, 計算適合的模數大小<br/># Module = mm of pitch diameter per tooth<br/>#m = 0.8*canvas.width/n<br/># pr 為節圓半徑<br/>pr = n*m/2 # gear Pitch radius<br/># generate gear<br/>data = creategeartooth(m, n, pa)<br/># Brython 程式中的 print 會將資料印在 Browser 的 console 區<br/>#print(data)<br/>gearTooth = path(data, {<br/>"fillColor":"#ddd0dd",<br/>"border": True,<br/>"strokeColor": "#606060" })<br/>gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh<br/># 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中<br/>gear = gearTooth.dup()<br/># gear 為單一齒的輪廓資料<br/>#cgo.render(gearTooth)</p>
<p># 利用單齒輪廓旋轉, 產生整個正齒輪外形<br/>for i in range(1, n):<br/># 將 gearTooth 中的資料複製到 newTooth<br/>newTooth = gearTooth.dup()<br/># 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear<br/>newTooth.rotate(360*i/n)<br/>gear.appendPath(newTooth)<br/># 建立軸孔<br/># add axle hole, hr 為 hole radius<br/>hr = 0.6*pr # diameter of gear shaft<br/>shaft = path(shapedefs.circle(hr), {<br/>"fillColor":"#ddd0dd",<br/>"border": True,<br/>"strokeColor": "#606060" })<br/>gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path<br/>return gear</p>
<p># 設定兩齒齒數<br/>n1 = 17<br/>n2 = 11<br/>n3 = 13<br/>reduced_ratio = 0.5<br/># 使用 80% 的畫布寬度<br/>m = 0.8*canvas.width/((n1+n2+n3)*reduced_ratio)<br/># 設定共同的壓力角<br/>pa = 25<br/># n 齒輪的節圓半徑<br/>pr1 = n1*m/2<br/># n2 齒輪的節圓半徑<br/>pr2 = n2*m/2<br/>pr3 = n3*m/2</p>
<p>cx = canvas.width/2<br/>cy = canvas.height/2<br/># 建立 gears<br/>gear1 = cangoGear(n1, m, pa)<br/>gear2 = cangoGear(n2, m, pa)<br/>gear3 = cangoGear(n3, m, pa)</p>
<p>from browser.timer import set_interval</p>
<p>deg = math.pi/180<br/>rotate_speed = 12*deg</p>
<p>def draw():<br/>cgo.clearCanvas()<br/>gear1.transform.translate(cx-(pr1+pr2)*reduced_ratio, cy)<br/>gear1.transform.scale(reduced_ratio)<br/>gear1.transform.rotate(0)<br/>gear1.rotate(rotate_speed)<br/>cgo.render(gear1)<br/><br/>gear2.transform.translate(cx, cy)<br/>gear2.transform.scale(reduced_ratio)<br/>gear2.transform.rotate(180+(360/n2/2))<br/>gear2.rotate(-(rotate_speed)*n1/n2)<br/>cgo.render(gear2)<br/><br/>gear3.transform.translate(cx+(pr2+pr3)*reduced_ratio, cy)<br/>gear3.transform.scale(reduced_ratio)<br/>gear3.transform.rotate(180+(360/n3/2)+(180+(360/n2/2))*n2/n3)<br/>gear3.rotate((rotate_speed*n1/n2)*(n2/n3))<br/>cgo.render(gear3)</p>
<p>set_interval(draw, 2)<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "spur" 的按鈕點按時, 執行 Spur 物件中的 prog 方法<br/>doc["spur"].bind('click', Spur.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- cango spur gears ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- temp convert start --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Temp = beditor.editor("""# Temperature Conversion<br/># Temperature Conversion<br/>'''<br/>C to F: Celsius to Fahrenheit Conversion Formula. To convert temperatures in degrees Celsius to Fahrenheit, multiply by 1.8 (or 9/5) and add 32.</p>
<p>To convert temperatures in degrees Fahrenheit to Celsius, subtract 32 and multiply by .5556 (or 5/9).</p>
<p>Fahrenheit = Celsius*9/5 + 32</p>
<p>Celsium = (Fahrenheit - 32)*5/9<br/>'''<br/>from browser import document, html<br/>brython_div = document["brython_div"]</p>
<p>def c2f(c):<br/>f = round(c*9/5 + 32, 3)<br/>return "Celsiusc: "+ str(c) + " degrees = Fahrenheit: " + str(f) + " degrees"<br/><br/>def f2c(f):<br/>c = round((f - 32)*5/9, 3)<br/>return "Fahrenheit: "+ str(f) + " degrees = Celsiusc: " + str(c) + " degrees"<br/><br/>choice = input("c2f or f2c")<br/>if choice == "c2f":<br/>'''<br/>c = float(input("input Celsius in degrees"))<br/>print(c2f(c))<br/>'''<br/>for deg in range(100):<br/>brython_div &lt;= c2f(deg)<br/>brython_div &lt;= html.BR()<br/>else:<br/>'''<br/>f = float(input("input Fahrenheit in degrees"))<br/>print(f2c(f))<br/>'''<br/>for deg in range(100):<br/>brython_div &lt;= f2c(deg)<br/>brython_div &lt;= html.BR()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "temp" 的按鈕點按時, 執行 Temp 物件中的 prog 方法<br/>doc["temp"].bind('click', Temp.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- temp convert ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- forloop start --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Forloop = beditor.editor("""# For loop<br/>for i in range(5):<br/>print(i)<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "forloop" 的按鈕點按時, 執行 Forloop 物件中的 prog 方法<br/>doc["forloop"].bind('click', Forloop.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- forloop ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- guess start --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Guess = beditor.editor("""# 猜數字遊戲<br/>from browser import document, html, alert<br/>import random</p>
<p># 跳出文字說明視窗<br/>alert("開始玩猜數字遊戲")<br/># 利用 random 模組中的 randint 取 1~100 間的亂數<br/>標準答案 = random.randint(1, 100)<br/># 利用 input 函式視窗, 取使用者所猜的數字, 轉為整數<br/>你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))<br/># 猜測次數起始值設為 1<br/>猜測次數 = 1<br/># 進入重複迴圈, 直到猜對數字<br/>while 標準答案 != 你猜的數字:<br/># 根據使用者所猜的數字, 與答案比較後, 給出提示<br/>if 標準答案 &lt; 你猜的數字:<br/>alert("猜第" + str(猜測次數) + "次, 太大了，再猜 :)加油")<br/>else:<br/>alert("猜第" + str(猜測次數) + "次, 太小了，再猜 :)加油")<br/>你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))<br/># 猜測次數累加<br/>猜測次數 += 1</p>
<p># 跳出迴圈表示猜對, 給出最後文字說明視窗<br/>alert("猜對了！答案為" + str(標準答案) + ", 總共猜了" + str(猜測次數) + "次")<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "guess" 的按鈕點按時, 執行 Guess 物件中的 prog 方法<br/>doc["guess"].bind('click', Guess.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- guess ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- autoguess start --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Autoguess = beditor.editor("""# 程式自動猜數字遊戲<br/>from browser import document, html, alert<br/>import random<br/><br/>id4 = document["brython_div"]</p>
<p>執行次數 = 100<br/>總猜測次數 = 0<br/>for i in range(執行次數):<br/>id4 &lt;= "第" + str(i+1) + "次玩:" + html.BR()<br/>下限 = 1<br/>上限 = 100<br/>標準答案 = random.randint(下限, 上限)<br/>pc猜的數字 = random.randint(下限, 上限)<br/>#print(標準答案, pc猜的數字)<br/>#integer int()<br/>#string str()<br/>#float float()<br/>#你猜的數字 = int(input("請輸入您所猜的整數:"))<br/>猜測次數 = 1<br/>while 標準答案 != pc猜的數字:<br/>if 標準答案 &lt; pc猜的數字:<br/>#print("太大了，再猜一次 :)加油")<br/># 因此已經確定"pc猜的數字"不是答案, 因此 - 1<br/>id4 &lt;= "電腦猜的數字:" + str(pc猜的數字) + " 太大了!" + html.BR()<br/>上限 = pc猜的數字 - 1<br/>else:<br/>#print("太小了，再猜一次 :)加油")<br/># 因此已經確定"pc猜的數字"不是答案, 因此 + 1<br/>id4 &lt;= "電腦猜的數字:" + str(pc猜的數字) + " 太小了!" + html.BR()<br/>下限 = pc猜的數字 + 1<br/>#pc猜的數字 = int(input("請輸入您所猜的整數:"))<br/>pc猜的數字 = random.randint(下限, 上限)<br/>猜測次數 += 1</p>
<p>#print("猜對了！總共猜了", 猜測次數, "次")<br/>id4 &lt;= "電腦猜對了, 答案為: " + str(標準答案) + ", 總共猜了 "+ str(猜測次數) + "次" + html.BR()<br/>總猜測次數 += 猜測次數</p>
<p>平均猜測次數 = int(總猜測次數/執行次數)<br/>#print("平均次數", 平均猜測次數)<br/>id4 &lt;= "平均次數: " + str(平均猜測次數)<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "autoguess" 的按鈕點按時, 執行 Autoguess 物件中的 prog 方法<br/>doc["autoguess"].bind('click', Autoguess.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- autoguess ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- lottery start --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Lottery = beditor.editor("""# 大樂透電腦選號<br/># lottery<br/>from browser import document, html, alert<br/>import random</p>
<p>try:<br/>total = int(input("請問要出幾張彩卷號碼?"))<br/>except:<br/>alert("請輸入要選擇電腦選號數量的'整數'")<br/>total = int(input("請問要出幾張彩卷號碼?"))</p>
<p># 準備將電腦選出的號碼, 輸出到內定 id="brython_div" 的標註區域<br/>output_div = document["brython_div"]<br/>output_div &lt;= "以下將出 " + str(total) + " 張電腦選號彩卷:" + html.BR()<br/>for i in range(1, total + 1):<br/># 利用 list(range()) 產生 1 到 49 的 population list<br/># 然後再透過 random.sample(population, k) <br/># 從 population, 產生 k 個不同的數字<br/>numbers = random.sample(list(range(1, 49)), 6)<br/>output_div &lt;= str(i) + ". 電腦選號為: " + str(numbers) + html.BR()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "lottery" 的按鈕點按時, 執行 Lottery 物件中的 prog 方法<br/>doc["lottery"].bind('click', Lottery.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- lottery ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- bezier starts --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Bezier = beditor.editor("""# Cango Bezier 繪圖<br/>from browser import window, html<br/>from browser import document as doc</p>
<p>canvas = html.CANVAS(width = 600, height = 400)<br/>canvas.id = "canvas"<br/>brython_div = doc["brython_div"]<br/>brython_div &lt;= canvas</p>
<p># Javascript 物件<br/>cango = window.Cango.new<br/>path = window.Path.new<br/>shape = window.Shape.new<br/>group = window.Group.new<br/># Javascript 變數<br/>shapedefs = window.shapeDefs<br/>g1 = cango("canvas")<br/>g1.clearCanvas()<br/>g1.gridboxPadding(10, 10, 5, 7)<br/>g1.fillGridbox("lightgreen")<br/>g1.setWorldCoordsRHC(-100, -100, 400)</p>
<p>x1 = 40<br/>y1 = 20<br/>cx1 = 90<br/>cy1 = 120<br/>x2 = 120<br/>y2 = 100<br/>cx2 = 130<br/>cy2 = 20<br/>cx3 = 150<br/>cy3 = 120<br/>x3 = 180<br/>y3 = 60</p>
<p>def dragC1(mousePos):<br/>global cx1, cy1<br/>cx1 = mousePos.x<br/>cy1 = mousePos.y<br/>drawCurve()</p>
<p>def dragC2(mousePos):<br/>global cx2, cy2<br/>cx2 = mousePos.x<br/>cy2 = mousePos.y<br/>drawCurve()</p>
<p>def dragC3(mousePos):<br/>global cx3, cy3<br/>cx3 = mousePos.x<br/>cy3 = mousePos.y<br/>drawCurve()</p>
<p>def drawCurve():<br/>qbez = path(['M', x1, y1, 'Q', cx1, cy1, x2, y2], {<br/>'strokeColor':'blue'})<br/>cbez = path(['M', x2, y2, 'C', cx2, cy2, cx3, cy3, x3, y3], {<br/>'strokeColor':'green'})<br/>L1 = path(['M', x1, y1, 'L', cx1, cy1, x2, y2], {<br/>'strokeColor':"rgba(0, 0, 0, 0.2)",<br/>'dashed':[4]})<br/>L2 = path(['M', x2, y2, 'L', cx2, cy2], {<br/>'strokeColor':"rgba(0, 0, 0, 0.2)",<br/>'dashed':[4]})<br/>L3 = path(['M', x3, y3, 'L', cx3, cy3], {<br/>'strokeColor':"rgba(0, 0, 0, 0.2)",<br/>'dashed':[4]})<br/>c1.transform.translate(cx1, cy1)<br/>c2.transform.translate(cx2, cy2)<br/>c3.transform.translate(cx3, cy3)<br/>grp = group(qbez, cbez, L1, L2, L3, c1, c2, c3)<br/>g1.render(grp, True)</p>
<p>g1.clearCanvas("lightyellow")<br/>g1.deleteAllLayers()<br/>g1.setWorldCoordsRHC(0, 0, 200)</p>
<p>c1 = shape(shapedefs.circle(6), {'fillColor':'red'})<br/>c1.enableDrag(None, dragC1, None)</p>
<p>c2 = shape(shapedefs.circle(6), {'fillColor':'red'})<br/>c2.enableDrag(None, dragC2, None)</p>
<p>c3 = shape(shapedefs.circle(6), {'fillColor':'red'})<br/>c3.enableDrag(None, dragC3, None);</p>
<p>drawCurve()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "bezier" 的按鈕點按時, 執行 Bezier 物件中的 prog 方法<br/>doc["bezier"].bind('click', Bezier.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- bezier ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- turtle1 starts --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Turtle1 = beditor.editor("""# Turtle1 繪圖<br/>from browser import window, html<br/>from browser import document as doc<br/>import turtle<br/>turtle.set_defaults(<br/>turtle_canvas_wrapper = doc['brython_div']<br/>)<br/>t = turtle.Turtle()</p>
<p>t.width(5)</p>
<p>for c in ['red', '#00ff00', '#fa0', 'rgb(0,0,200)']:<br/>t.color(c)<br/>t.forward(100)<br/>t.left(90)</p>
<p># dot() and write() do not require the pen to be down<br/>t.penup()<br/>t.goto(-30, -100)<br/>t.dot(40, 'rgba(255, 0, 0, 0.5')<br/>t.goto(30, -100)<br/>t.dot(40, 'rgba(0, 255, 0, 0.5')<br/>t.goto(0, -70)<br/>t.dot(40, 'rgba(0, 0, 255, 0.5')</p>
<p>t.goto(0, 125)<br/>t.color('purple')<br/>t.write("這就是 Brython, 網頁上的 Python", font=("Arial", 15, "normal"))</p>
<p>turtle.done()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "turtle1" 的按鈕點按時, 執行 Turtle1 物件中的 prog 方法<br/>doc["turtle1"].bind('click', Turtle1.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- turtle1 ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- turtle2 starts --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Turtle2 = beditor.editor("""# Turtle2 繪圖<br/>from browser import document as doc<br/>import turtle<br/>turtle.set_defaults(<br/>turtle_canvas_wrapper = doc['brython_div']<br/>)<br/>star = turtle.Turtle()</p>
<p>for i in range(5):<br/>star.forward(250)<br/>star.right(144)<br/><br/>turtle.done()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "turtle2" 的按鈕點按時, 執行 Turtle2 物件中的 prog 方法<br/>doc["turtle2"].bind('click', Turtle2.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- turtle2 ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- turtle3 starts --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Turtle3 = beditor.editor("""# Turtle3 繪圖<br/># https://michael0x2a.com/blog/turtle-examples<br/>from browser import document as doc<br/>import turtle<br/>turtle.set_defaults(<br/>turtle_canvas_wrapper = doc['brython_div']<br/>)<br/>painter = turtle.Turtle()</p>
<p>painter.pencolor("blue")</p>
<p>for i in range(50):<br/>painter.forward(50)<br/>painter.left(123) # Let's go counterclockwise this time <br/><br/>painter.pencolor("red")<br/>for i in range(50):<br/>painter.forward(100)<br/>painter.left(123)<br/><br/>turtle.done()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "turtle3" 的按鈕點按時, 執行 Turtle3 物件中的 prog 方法<br/>doc["turtle3"].bind('click', Turtle3.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- turtle3 ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- turtle4 starts --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Turtle4 = beditor.editor("""# Turtle4 繪圖<br/># https://docs.python.org/3.7/library/turtle.html?highlight=turtle<br/># https://fiftyexamples.readthedocs.io/en/latest/turtle.html<br/>from browser import document as doc<br/>import turtle<br/>turtle.set_defaults(<br/>turtle_canvas_wrapper = doc['brython_div']<br/>)<br/># 輸入 "turtle" 字串, 表示要使用內建的烏龜圖示<br/>t = turtle.Turtle("turtle")</p>
<p># 設定繪圖尺寸<br/>screen_x = 500-20<br/>screen_y = 300</p>
<p># 提筆, 將烏龜移動到畫布中心<br/>t.penup()<br/>t.home()</p>
<p># 內定方向為右, 前進 screen_x/2<br/>t.forward(screen_x / 2)<br/># 將方向往右轉 90 度<br/>t.right(90)<br/># 此時方向向下, 前進 screen_y/2<br/>t.forward(screen_y / 2)<br/># 令烏龜方向轉絕對角度 180, 等同轉相對角度 90 度, 即 t.right(90)<br/>t.setheading(180)</p>
<p># 將畫筆顏色設為紅色<br/>t.pencolor('red')<br/># 下筆準備繪圖<br/>t.pendown()<br/># 設筆寬度為 10<br/>t.pensize(10)<br/># 進入重複迴圈, 此時方向向右, 分別<br/># 前進 screen_x, 之後轉 90 度, 方向朝上<br/># 再前進 screen_y, 之後再轉 90 度, 方向朝右<br/># 再前進 screen_x, 之後轉 90 度, 方向朝下<br/># 最後再前進 screen_y 後, 將方向轉為向左<br/>for distance in (screen_x, screen_y, screen_x, screen_y):<br/>t.forward(distance)<br/>t.right(90)</p>
<p># 提筆後, 將烏龜轉回內定方向回到畫布中心<br/>t.penup()<br/>t.home()<br/># 完成 turtle 繪圖<br/>turtle.done()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "turtle4" 的按鈕點按時, 執行 Turtle4 物件中的 prog 方法<br/>doc["turtle4"].bind('click', Turtle4.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- turtle4 ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- turtle5 starts --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Turtle5 = beditor.editor("""# Turtle5 繪圖<br/># https://brython.info/gallery/turtle.html<br/>from browser import document as doc<br/>import turtle<br/>import math<br/>turtle.set_defaults(<br/>turtle_canvas_wrapper = doc['brython_div']<br/>)<br/>t = turtle.Turtle("turtle")<br/>t.speed(1)<br/>t.forward(50)</p>
<p>print("Should be (50, 0):", t.position())<br/>print("Should be 50: ", t.xcor())<br/>print("Should be 0: ", t.ycor())</p>
<p>t.left(90)<br/>t.color("blue")<br/>t.speed(2)<br/>t.fd(50)</p>
<p>print("Should be (50, 50):", t.pos())<br/>print("Should be 225: ", t.towards(0, 0))<br/>print("Should be 90: ", t.heading())<br/>print("Should be approximately 71:", t.distance(0, 0))</p>
<p># Draw the same square in three different angle modes<br/>t.width(4)</p>
<p>print("Drawing using degrees - the default")<br/>print("Heading should be 90: ", t.heading())</p>
<p>for i in range(4):<br/>t.forward(100)<br/>t.left(90)</p>
<p>print("Drawing using radians")</p>
<p>t.radians()</p>
<p>print("Heading should be pi/2: ", t.heading())</p>
<p>for i in range(4):<br/>t.forward(100)<br/>t.left(math.pi/2)</p>
<p>print("Drawing using gradients")</p>
<p>t.degrees(400)</p>
<p>print("Heading should be 100: ", t.heading())</p>
<p>for i in range(4):<br/>t.forward(100)<br/>t.left(100)</p>
<p>t.degrees()<br/>t.width(1)</p>
<p>t.lt(90)<br/>t.color("orange")<br/>t.backward(50)<br/>t.right(90)<br/>t.color("green")<br/>t.back(50)<br/>t.rt(90)<br/>t.color("red")<br/>t.bk(50)<br/>t.stamp()<br/>t.speed(4)</p>
<p>t.color("black", "white")<br/>t.goto(-100, 100)<br/>t.stamp()<br/>t.color("blue", "yellow")<br/>t.setposition(0, 100)<br/>t.stamp()<br/>t.color("green", "white")<br/>t.setpos(100, 100)<br/>t.stamp()</p>
<p>t.speed(10)<br/>t.color("orange")<br/>t.sety(-100)<br/>t.setx(-100)<br/>t.stamp()</p>
<p>t.color("cyan")<br/>t.home()<br/>t.stamp()</p>
<p>t.color("green")<br/>t.width(4)<br/>t.setheading(180)<br/>t.forward(150)<br/>t.seth(90)<br/>t.fd(20)</p>
<p>t.dot(30, "rgba(255, 0, 0, 0.2)")<br/>t.color("red")<br/>t.speed(0)<br/>t.forward(30)<br/>t.left(90)<br/>t.circle(30)</p>
<p>turtle.done()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "turtle5" 的按鈕點按時, 執行 Turtle5 物件中的 prog 方法<br/>doc["turtle5"].bind('click', Turtle5.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- turtle5 ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- turtle6 starts --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Turtle6 = beditor.editor("""# Turtle6 繪圖<br/>from browser import document as doc<br/>import turtle<br/>import math<br/>turtle.set_defaults(<br/>turtle_canvas_wrapper = doc['brython_div']<br/>)</p>
<p>t = turtle.Turtle("turtle")<br/>t.speed(10)</p>
<p>colors = ['red', 'purple', 'blue', 'green', 'orange']<br/>for x in range(150):<br/>t.pencolor(colors[x % 5])<br/>t.width(x/10 + 1)<br/>t.forward(x)<br/>t.left(59)<br/>turtle.done()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "turtle6" 的按鈕點按時, 執行 Turtle6 物件中的 prog 方法<br/>doc["turtle6"].bind('click', Turtle6.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- turtle6 ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- turtle7 starts --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Turtle7 = beditor.editor("""# Turtle7 繪圖<br/>from browser import document as doc<br/>import turtle<br/>import math<br/>turtle.set_defaults(<br/>turtle_canvas_wrapper = doc['brython_div']<br/>)</p>
<p>screen=turtle.Screen() #making a canvas for drawing<br/>screen.bgcolor('black') #making canvas black</p>
<p>trtl=turtle.Turtle() #making a turtle</p>
<p>trtl.pencolor('red') #making colour of the pen red<br/>trtl.pensize(5) #choosing the size of pen nib <br/>trtl.speed(10) #choosing the speed of drawing<br/># shape should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’<br/>trtl.shape('turtle') #choosing the shape of pen nib<br/>trtl.forward(150) #drawing a line of 150 pixels<br/>trtl.right(90) #asking turtle to turn 90 degrees<br/>trtl.forward(150) #drawing a line of 150 pixels<br/>trtl.penup() # preparing for moving pen without drawing<br/>trtl.setpos(-140,-120) # making the new position of the turtle<br/>trtl.pendown() # bringing the pen down for drawing again<br/>trtl.pencolor('green') # choosin the pen colour as green<br/>trtl.write('Brython 烏龜繪圖', font=("Arial", 20, "bold")) # chosing the font<br/>trtl.penup()<br/>trtl.ht() # hiding the turtle from the screen<br/>turtle.done()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "turtle7" 的按鈕點按時, 執行 Turtle7 物件中的 prog 方法<br/>doc["turtle7"].bind('click', Turtle7.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- turtle7 ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- turtle8 starts --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Turtle8 = beditor.editor("""# Turtle8 繪圖<br/>from browser import document as doc<br/>import turtle<br/>import math<br/>turtle.set_defaults(<br/>turtle_canvas_wrapper = doc['brython_div']<br/>)<br/>wn = turtle.Screen() <br/>wn.bgcolor("black")</p>
<p>skk = turtle.Turtle() <br/>skk.speed(10)<br/>skk.shape("circle")<br/>skk.color("blue") <br/><br/>def sqrfunc(size): <br/>for i in range(4): <br/>skk.fd(size) <br/>skk.left(90) <br/>size = size-5<br/><br/>sqrfunc(146) <br/>sqrfunc(126) <br/>sqrfunc(106) <br/>sqrfunc(86) <br/>sqrfunc(66) <br/>sqrfunc(46) <br/>sqrfunc(26) <br/>turtle.done()<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "turtle8" 的按鈕點按時, 執行 Turtle8 物件中的 prog 方法<br/>doc["turtle8"].bind('click', Turtle8.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- turtle8 ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- konva1 starts --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Konva1 = beditor.editor("""# Konva1 繪圖<br/># 引用 https://konvajs.github.io/ 繪圖<br/>from browser import document, html, window</p>
<p>width = 600<br/>height = 400</p>
<p>konva = window.Konva<br/># Konva 必須在 canvas 繪圖, 從上方設定, canvas id 為 "container"<br/>stage = konva.Stage.new({<br/>"container": 'brython_div',<br/>"width": width,<br/>"height": height<br/>})</p>
<p>layer = konva.Layer.new()<br/>rectX = stage.getWidth() / 2 - 50<br/>rectY = stage.getHeight() / 2 - 25</p>
<p>box = konva.Rect.new({<br/>"x": rectX,<br/>"y": rectY,<br/>"width": 100,<br/>"height": 50,<br/>"fill": '#00D2FF',<br/>"stroke": 'black',<br/>"strokeWidth": 4,<br/>"draggable": True<br/>})</p>
<p>def f1():<br/>document.body.style.cursor = 'pointer'<br/><br/>def f2():<br/>document.body.style.cursor = 'default'</p>
<p># add cursor styling<br/>box.on('mouseover', f1())<br/>box.on('mouseout', f2())</p>
<p>layer.add(box)<br/>stage.add(layer)<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "konva1" 的按鈕點按時, 執行 Konva1 物件中的 prog 方法<br/>doc["konva1"].bind('click', Konva1.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- konva1 ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- ycqsort starts --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Ycqsort = beditor.editor("""# Ycombinator quicksort example<br/>Y = lambda f: lambda *args: f(Y(f))(*args)</p>
<p>quicksort = Y(lambda f:<br/>lambda x: (<br/>f([item for item in x if item &lt; x[0]])<br/>+ [y for y in x if x[0] == y]<br/>+ f([item for item in x if item &gt; x[0]])<br/>) if x else [])<br/><br/>print(quicksort([1, 3, 5, 4, 1, 3, 2]))<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "ycqsort" 的按鈕點按時, 執行 Ycqsort 物件中的 prog 方法<br/>doc["ycqsort"].bind('click', Ycqsort.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- ycqsort ends --&gt;<br/>&lt;p&gt;&lt;/p&gt;<br/>&lt;!-- ball starts --&gt;<br/>&lt;p&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import document as doc<br/>import beditor<br/>Ball = beditor.editor("""# Ggame ball example<br/>from ggame import (<br/>App, <br/>Color, <br/>LineStyle, <br/>Sprite, <br/>RectangleAsset, <br/>ImageAsset,<br/>CircleAsset, <br/>EllipseAsset, <br/>PolygonAsset,<br/>)<br/>from browser import document as doc<br/>from browser import html</p>
<p># 引入既有的id="graphics-column" 標註<br/>graphics_column = doc["graphics-column"]<br/># 建立內定名稱為 "ggame-canvas" 的 canvas 標註<br/>canvas = html.CANVAS(width = 600, height = 100)<br/>canvas.id = "ggame-canvas"<br/># 將 canvas 插入 gc 標註中<br/>graphics_column &lt;= canvas</p>
<p># reverse - change the ball direction<br/>def reverse(b):<br/>b.direction *= -1</p>
<p># Set up function for handling screen refresh<br/>def step():<br/>if ball.go:<br/>ball.x += ball.direction<br/>if ball.x + ball.width &gt; myapp.width or ball.x &lt; 0:<br/>ball.x -= ball.direction<br/>reverse(ball)</p>
<p>myapp = App()<br/># Three primary colors with no transparency (alpha = 1.0)<br/>red = Color(0xff0000, 1.0)<br/>green = Color(0x00ff00, 1.0)<br/>blue = Color(0x0000ff, 1.0)<br/>black = Color(0x000000, 1.0)<br/># define colors and line style<br/>green = Color(0x00ff00, 1)<br/>black = Color(0, 1)<br/>noline = LineStyle(0, black)<br/># a rectangle asset and sprite to use as background<br/>bg_asset = RectangleAsset(canvas.width, canvas.height, noline, green)<br/>bg = Sprite(bg_asset, (0,0))<br/>ball_asset = ImageAsset("/images/orb-150545_640.png")<br/>ball = Sprite(ball_asset, (0, 0))<br/># Original image is too big. Scale it to 1/10 its original size<br/>ball.scale = 0.1<br/># custom attributes<br/>ball.direction = 7<br/>ball.go = True<br/>myapp.run(step)<br/>""", "kw_editor", "kw_console", "kw__container", "kw_py_src")<br/># id 為 "ball" 的按鈕點按時, 執行 Ball 物件中的 prog 方法<br/>doc["ball"].bind('click', Ball.prog)<br/>&lt;/script&gt;<br/>&lt;/p&gt;<br/>&lt;!-- ball ends --&gt;<br/>&lt;p&gt;&lt;button id="keyword"&gt;Keyword&lt;/button&gt;&lt;button id="ex1"&gt;Ex1&lt;/button&gt;&lt;button id="ex2"&gt;Ex2&lt;/button&gt;&lt;button id="ex3"&gt;Ex3&lt;/button&gt;&lt;button id="ex4"&gt;Ex4&lt;/button&gt;&lt;button id="forloop"&gt;Ex5&lt;/button&gt;&lt;button id="guess"&gt;Guess&lt;/button&gt;&lt;button id="autoguess"&gt;Autoguess&lt;/button&gt;&lt;button id="lottery"&gt;Lottery&lt;/button&gt;&lt;button id="temp"&gt;Temp&lt;/button&gt;&lt;button id="draw"&gt;Draw&lt;/button&gt;&lt;button id="flag"&gt;Flag&lt;/button&gt;&lt;button id="bezier"&gt;Bezier&lt;/button&gt;&lt;button id="turtle1"&gt;Turtle1&lt;/button&gt;&lt;button id="turtle2"&gt;Turtle2&lt;/button&gt;&lt;button id="turtle3"&gt;Turtle3&lt;/button&gt;&lt;button id="turtle4"&gt;Turtle4&lt;/button&gt;&lt;button id="turtle5"&gt;Turtle5&lt;/button&gt;&lt;button id="turtle6"&gt;Turtle6&lt;/button&gt;&lt;button id="turtle7"&gt;Turtle7&lt;/button&gt;&lt;button id="turtle8"&gt;Turtle8&lt;/button&gt;&lt;button id="konva1"&gt;Konva1&lt;/button&gt;&lt;button id="bunny"&gt;Bunny&lt;/button&gt;&lt;button id="ball"&gt;Ball&lt;/button&gt;&lt;button id="spur"&gt;Spur&lt;/button&gt;&lt;button id="ycqsort"&gt;Ycqsort&lt;/button&gt;&lt;button id="clear"&gt;Clear&lt;/button&gt;&lt;/p&gt;<br/>&lt;h4&gt;參考資料:&lt;/h4&gt;<br/>&lt;p&gt;&lt;a href="/downloads/turtle_intro.pdf"&gt;turtle_intro.pdf&lt;/a&gt;&lt;/p&gt;<br/>&lt;p&gt;&lt;a href="/downloads/turtle_intro2.pdf"&gt;turtle_intro2.pdf&lt;/a&gt;&lt;/p&gt;<br/>&lt;p&gt;其他擷取程式的方式: &lt;a href="http://mde.tw/2017springvcp/blog/web-based-python.html"&gt;http://mde.tw/2017springvcp/blog/web-based-python.html&lt;/a&gt;&amp;nbsp;&lt;/p&gt;</p>
<h1>Python 語法</h1>
<p>Python 3 官方教材: <a href="https://docs.python.org/3/index.html">https://docs.python.org/3/index.html</a> </p>
<p>Python tutorial: <a href="https://docs.python.org/3/tutorial/index.html">https://docs.python.org/3/tutorial/index.html</a> (英文)</p>
<p>Python 教學: <a href="https://python-doc-tw.github.io/tutorial/index.html">https://python-doc-tw.github.io/tutorial/index.html</a> </p>
<p>網頁上的 Python - Brython: <a href="https://www.brython.info/static_doc/en/intro.html">https://www.brython.info/static_doc/en/intro.html</a>  (解譯式)</p>
<p>網頁上的 Python GUI- Flexx: <a href="https://flexx.readthedocs.io/en/stable/">https://flexx.readthedocs.io/en/stable/</a> (轉譯式)</p>
<p># 導入 sys 模組<br/>import sys<br/># 導入 keyword 模組<br/>import keyword</p>
<p>def helloWorld():<br/>print("Hello World!")</p>
<p>helloWorld()</p>
<p># 利用 sys 模組中的 version_info 印出 Python 版次<br/>print("Python version: ", sys.version_info)<br/># 利用 keyword 模組中的 kwlist 印出關鍵字<br/>print("Python keywords: ", keyword.kwlist)</p>
<h1>Independent Study</h1>
<h1>Experience</h1>
<h3>week10</h3>
<ul>
<li>更新<span><strong> P37-18.11</strong></span></li>
</ul>
<p>將stop.bat以SciTE開啟,並將其內容改成,如下</p>
<pre><span><code>@echo off
set Disk=y
REM 關閉 SciTE
taskkill /IM Sc1.exe /F
REM 關閉 python
taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F
REM 關閉 stunnel
taskkill /IM stunnel.exe /F
REM 關閉 fossil
taskkill /IM fossil.exe /F
rem taskkill /IM sharex.exe /F
REM 清除 log 資料
path=%PATH%;
REM del /Q /F  V:\tmp\*.*
REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F
REM taskkill /IM mingw32 /F
EXIT</code></span></pre>
<ul>
<li>使用<span><strong>eric6</strong></span><span> </span>製作<span> </span><span><strong>PyQt </strong></span></li>
<li><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/iOBPj72CW2A" width="560"></iframe></span></li>
</ul>
<h2>week11</h2>
<ul>
<li><span>註冊Heroku帳號</span><span></span></li>
<li><span>建立群組，並加入組員</span><span></span></li>
<li><img alt="" height="525" src="/images/未命名.png" width="840"/></li>
<li><img alt="" height="525" src="/images/1.png" width="840"/></li>
</ul>
<h2>week12</h2>
<p>將github靜態網站與heroku動態網站進行同步</p>
<p>構思出期末專題：小遊戲</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2QDqaj_oF3U" width="560"></iframe></p>
<h2>week13</h2>
<p><span>(1)介紹leo-editor的基本操作</span></p>
<p><span>(2)brython小遊戲</span></p>
<p><span>本周學習到一些簡單的python語法</span></p>
<p>讓我們在運用上更加便利</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/KZnCu1Sq1vo" width="560"></iframe></p>
<h2>week14</h2>
<p>本周學習<span>CMSimfly登入系統的程式，</span></p>
<p><span>leo-editor內if判斷式的運用‧</span></p>
<p><span>參考網站 if 判斷式</span></p>
<p><span><a href="https://openhome.cc/Gossip/CGossip/ifStatement.html">if 條件判斷</a></span></p>
<h2>week15</h2>
<p>(1)本周老師協助我們找尋期末題目的方向，並且示範了很多</p>
<p>小程式(ggame)的應用幫助我們尋找方向‧</p>
<p>老師教學影片:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/nEZo_QPwgto" width="560"></iframe></p>
<h2>week16</h2>
<p></p>
<h2>week17</h2>
<p>40723143:</p>
<p>這學期第一次接觸到程式語言的課程，剛開始幾乎都聽不懂，後來慢慢問同學，請求幫助，終於成功完成自己的網頁，也幫自己的網頁換新背景圖片，看得賞心悅目。也很有成就感，而期末專題也讓我知道，團隊合作的重要性，每個人分工合作才能把事情完美的完成，謝謝組員那麼給力，共同完成了期末報告。</p>
<p>40723105:</p>
<p>這學期的在自己的網頁管理上學會了如何編輯與新增內容，也讓我從完全不理解程式語言到漸漸喜歡學習書寫程式，到期末也終於利用自己這學期的所學完成了與組員一起努力的成果，也覺得非常有趣，在合作的過程中雖然每個人的意見有些不同，但後來大家經過討論也取得了共識，這次期末報告讓我學到了很多。</p>
<p>40723107:</p>
<p>第一次接觸到計算機程式這門課程，從剛開始都不太熟練如何操作到後來靠著同學的幫忙來指引我如何操作，才慢慢了解了程式以及語言，從一開始的建立自己的網站到後來分組來做的分組網站和報告，在共同的幫忙以及合作中一起完成了這個我們的期末網站也懂得分工合作的重要性以及團隊合作的精神 !</p>
<p>40723106:</p>
<p>一開始在課表上看到計算機程式，以為跟高中的差不多學不到什麼東西，直到開學一上課發現跟高中的差太多了，能學到很多東西，學會怎麼創自己的網頁，怎麼改背景、網誌等等，從一開始什麼都不會，到學期末學到許多程式語言的應用，到下學期大家分組一起合作，學到了別人會而我不會的東西，讓我更近一步了解計算機程式這門課程。</p>
<p><span style="background-color: #ffffff; color: #626262;">40723139:</span></p>
<p>高中的時候完全沒接觸過計算機程式，所以一開始學起來有點累，什麼都不懂，後來我自己看影片慢慢學慢慢理解每個指令的用法以及用意，我才發現到其實計算機程式還滿有趣的，還可以建立自己的網站，到後來的分組網站，除了學到網站管理外也學到了團隊合作的重要性。</p>
<h2>week18</h2>
<h1>Final reportp</h1>
<h1>Attend＆Absence</h1>
<p><span>Attend：<strong>√</strong></span></p>
<p><span>Absence：X</span></p>
<table border="1" height="337" style="border-collapse: collapse; width: 135.714%; height: 345px;">
<tbody>
<tr style="height: 51px;">
<td style="width: 10%; height: 51px;"></td>
<td style="width: 10%; height: 51px;">week10</td>
<td style="width: 10%; height: 51px;">week11</td>
<td style="width: 10%; height: 51px;">week12</td>
<td style="width: 10%; height: 51px;">week13</td>
<td style="width: 10%; height: 51px;">week14</td>
<td style="width: 10%; height: 51px;">week15</td>
<td style="width: 10%; height: 51px;">week16</td>
<td style="width: 10%; height: 51px;">week17</td>
<td style="width: 10%; height: 51px;">week18</td>
</tr>
<tr style="height: 49px;">
<td style="width: 10%; height: 49px;">詹益任</td>
<td style="width: 10%; text-align: center; height: 49px;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><b><strong>√</strong></b></td>
</tr>
<tr style="height: 49px;">
<td style="width: 10%; height: 49px;">王昱翔</td>
<td style="width: 10%; text-align: center; height: 49px;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
</tr>
<tr style="height: 49px;">
<td style="width: 10%; height: 49px;">王志丞</td>
<td style="width: 10%; text-align: center; height: 49px;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
</tr>
<tr style="height: 49px;">
<td style="width: 10%; height: 49px;">王晨祐</td>
<td style="width: 10%; text-align: center; height: 49px;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
</tr>
<tr style="height: 49px;">
<td style="width: 10%; height: 49px;">黃柏翰</td>
<td style="width: 10%; text-align: center; height: 49px;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
</tr>
<tr style="height: 49px;">
<td style="width: 10%; height: 49px;">徐敬倫</td>
<td style="width: 10%; text-align: center; height: 49px;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
<td style="width: 10%; height: 49px; text-align: center;"><strong>√</strong></td>
</tr>
</tbody>
</table>
<p></p>